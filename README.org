* Sensu Plugins

This gem contains some example plugins, and libraries for writing your
own. You don't need to use these libraries to write a check (indeed, you
should be able to just drop in any Nagios plugin), but they will
hopefully make it easier.

** Installation

This gem will install the contents of =bin= as scripts; your RubyGems
installation will install wrappers for them somewhere in your =$PATH=.
Because the actual directory used for this varies between systems, you
should not use the full path to a check in a =command= in your Sensu
config -- just let $PATH handle it.

To avoid conflicting with system binaries, all scripts are named
starting with =check-=, =metric-=, or =handler-=. We recommend you
follow this convention.

** Checks and Metrics

To implement your own check, subclass =Sensu::Plugin::Check::CLI=, like
this:

#+BEGIN_SRC ruby
require 'sensu-plugin/check/cli'

class MyCheck < Sensu::Plugin::Check::CLI

  check_name 'My awesome check' # defaults to class name
  option :foo, :short => '-f' # Mixlib::CLI is included

  def run
    ok "All is well"
  end

end
#+END_SRC

This will output a string, like "My awesome check: OK - All is well",
and exit with a code of 0. The available exit methods, which will
immediately end the process, are:

  - =ok=
  - =warning=
  - =critical=
  - =unknown=

For a metric, subclass =Sensu::Plugin::Metric::CLI=. Your argument to
whichever exit method will be converted to JSON instead of Nagios-style
output. =check_name= is not supported. If your object doesnt respond to
=[:timestamp]=, it will add one for you.

You can override =format_output= if you want something other than these
two formats, but it's not documented yet.

** Handlers

For your own handler, subclass =Sensu::Handler=. It looks much like
checks and metrics; see the =handlers= directory for examples. Your class
should implement =handle(event)=. It is passed the event, which has been
read from stdin and parsed as JSON. Output to stdout will go to the log.

You can decide if you want to handle the event by overriding the
=filter= method; but this also isn't documented yet (see the source; the
built in method does some important filtering, so you probably want to
call it with =super=).

* License

Copyright 2011 Sonian, Inc. and contributors.

Released under the same terms as Sensu (the MIT license); see LICENSE
for details.

NOTE: When adding a plugin, copy the preceding two paragraphs to a
comment in each source file, changing the copyright holder to your own
name or organization. If you wish to use a different open source
license, please submit a pull request adding that license to the repo
and use that license's boilerplate instead.
